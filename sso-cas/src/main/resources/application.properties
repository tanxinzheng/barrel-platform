##
# CAS Server Context Configuration
#
#server.context-path=/cas
#server.port=8443
server.context-path=/
server.port=9000

#server.ssl.key-store=file:/etc/cas/thekeystore
#server.ssl.key-store-password=changeit
#server.ssl.key-password=changeit

spring.datasource.url=jdbc:mysql://localhost:3306/cas_sso?setUnicode=true&characterEncoding=utf8&autoReconnect=true&useSSL=false
spring.datasource.username=cas_dba
spring.datasource.password=123456
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

server.max-http-header-size=2097152
server.use-forward-headers=true
server.connection-timeout=20000
server.error.include-stacktrace=ALWAYS

server.compression.enabled=true
server.compression.mime-types=application/javascript,application/json,application/xml,text/html,text/xml,text/plain

server.tomcat.max-http-post-size=2097152
server.tomcat.basedir=build/tomcat
server.tomcat.accesslog.enabled=true
server.tomcat.accesslog.pattern=%t %a "%r" %s (%D ms)
server.tomcat.accesslog.suffix=.log
server.tomcat.min-spare-threads=10
server.tomcat.max-threads=200
server.tomcat.port-header=X-Forwarded-Port
server.tomcat.protocol-header=X-Forwarded-Proto
server.tomcat.protocol-header-https-value=https
server.tomcat.remote-ip-header=X-FORWARDED-FOR
server.tomcat.uri-encoding=UTF-8

spring.http.encoding.charset=UTF-8
spring.http.encoding.enabled=true
spring.http.encoding.force=true

##
# CAS Cloud Bus Configuration
#
spring.cloud.bus.enabled=false

# Indicates that systemPropertiesOverride can be used.
# Set to false to prevent users from changing the default accidentally. Default true.
spring.cloud.config.allow-override=true

# External properties should override system properties.
spring.cloud.config.override-system-properties=false

# When allowOverride is true, external properties should take lowest priority, and not override any
# existing property sources (including local config files).
spring.cloud.config.override-none=false

# spring.cloud.bus.refresh.enabled=true
# spring.cloud.bus.env.enabled=true
# spring.cloud.bus.destination=CasCloudBus
# spring.cloud.bus.ack.enabled=true

endpoints.enabled=false
endpoints.sensitive=true

endpoints.restart.enabled=false
endpoints.shutdown.enabled=false

# Control the security of the management/actuator endpoints
# The 'enabled' flag below here controls the rendering of details for the health endpoint amongst other things.
management.security.enabled=true
management.security.roles=ACTUATOR,ADMIN
management.security.sessions=if_required
management.context-path=/status
management.add-application-context-header=false

# Define a CAS-specific "WARN" status code and its order
management.health.status.order=WARN, DOWN, OUT_OF_SERVICE, UNKNOWN, UP

# Control the security of the management/actuator endpoints
# With basic authentication, assuming Spring Security and/or relevant modules are on the classpath.
security.basic.authorize-mode=role
security.basic.path=/cas/status/**
# security.basic.enabled=true
# security.user.name=casuser
# security.user.password=

##
# CAS Web Application Session Configuration
#
server.session.timeout=300
server.session.cookie.http-only=true
server.session.tracking-modes=COOKIE

##
# CAS Thymeleaf View Configuration
#
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.cache=true
spring.thymeleaf.mode=HTML
spring.thymeleaf.template-resolver-order=100
##
# CAS Log4j Configuration
#
# logging.config=file:/etc/cas/log4j2.xml
server.context-parameters.isLog4jAutoInitializationDisabled=true

##
# CAS AspectJ Configuration
#
#spring.aop.auto=true
#spring.aop.proxy-target-class=true

##
# CAS JDBC Authentication
#
#cas.authn.jdbc.encode[0].sql=select * from cas_user where username=?
#cas.authn.jdbc.encode[0].url=jdbc:mysql://localhost:3306/cas_sso?setUnicode=true&characterEncoding=utf8&autoReconnect=true&useSSL=false
#cas.authn.jdbc.encode[0].user=cas_dba
#cas.authn.jdbc.encode[0].password=123456
#cas.authn.jdbc.encode[0].driverClass=com.mysql.jdbc.Driver
#cas.authn.jdbc.encode[0].passwordFieldName=password
#cas.authn.jdbc.encode[0].saltFieldName=salt
#cas.authn.jdbc.encode[0].algorithmName=MD5

##
# CAS JWT
#
#cas.authn.token.crypto.enabled=true
#cas.authn.token.crypto.encryptionEnabled=true
#cas.authn.token.crypto.signing.key=
#cas.authn.token.crypto.signing.keySize=512
#cas.authn.token.crypto.encryption.key=
#cas.authn.token.crypto.encryption.keySize=256
#cas.authn.token.crypto.alg=AES


##
# CAS Service
# 1.在services目录下新建json文件，文件名称匹配规则:name-id，如service_name-service_id
#
cas.serviceRegistry.json.location=classpath:/services
cas.tgc.secure=false
cas.serviceRegistry.initFromJson=true


##
# CAS 自定义用户属性
#
#cas.authn.attributeRepository.jdbc[0].singleRow=true
#cas.authn.attributeRepository.jdbc[0].order=0
#cas.authn.attributeRepository.jdbc[0].url=jdbc:mysql://localhost:3306/cas_sso?setUnicode=true&characterEncoding=utf8&autoReconnect=true&useSSL=false
#cas.authn.attributeRepository.jdbc[0].user=cas_dba
#cas.authn.attributeRepository.jdbc[0].password=123456
##username 返回登录的时候的提供的用户名可以配置为和数据库一致，观察ddkj即可发现这里配置的为email
#cas.authn.attributeRepository.jdbc[0].username=username
#cas.authn.attributeRepository.jdbc[0].sql=select * from cas_user where username=?
## 下面这里为配置要返回的信息，要返回的信息为email
#cas.authn.attributeRepository.jdbc[0].attributes.email=email,phone
#cas.authn.attributeRepository.jdbc[0].dialect=org.hibernate.dialect.MySQLDialect
#cas.authn.attributeRepository.jdbc[0].driverClass=com.mysql.jdbc.Driver
# 允许传给客户端的用户属性字段值
# cas.authn.attributeRepository.defaultAttributesToRelease=email


##
# 启动自定义配置
#
#org.springframework.boot.autoconfigure.EnableAutoConfiguration=com.github.tanxinzheng.cas.CasConfig
